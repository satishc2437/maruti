<tool_usage_guide>
  <overview>Operational guidance for selecting and applying tools while generating or extending Python MCP servers. Emphasize minimal reads, precise diffs, safe commands, and iterative validation.</overview>

  <priority_order>
    <stage order="1">
      <goal>Understand workspace + existing server code</goal>
      <preferred_tools>
        <tool>list_files</tool>
        <tool>search_files</tool>
        <tool>read_file</tool>
      </preferred_tools>
    </stage>
    <stage order="2">
      <goal>Confirm requirements or ambiguities</goal>
      <preferred_tools>
        <tool>ask_followup_question</tool>
      </preferred_tools>
    </stage>
    <stage order="3">
      <goal>Create / scaffold project files</goal>
      <preferred_tools>
        <tool>write_to_file</tool>
      </preferred_tools>
    </stage>
    <stage order="4">
      <goal>Surgical updates / incremental improvements</goal>
      <preferred_tools>
        <tool>apply_diff</tool>
        <tool>search_and_replace</tool>
      </preferred_tools>
    </stage>
    <stage order="5">
      <goal>Execution / runtime verification</goal>
      <preferred_tools>
        <tool>execute_command</tool>
      </preferred_tools>
    </stage>
    <stage order="6">
      <goal>Integration with other MCP servers / resources</goal>
      <preferred_tools>
        <tool>use_mcp_tool</tool>
        <tool>access_mcp_resource</tool>
      </preferred_tools>
    </stage>
  </priority_order>

  <tool name="list_files">
    <purpose>Discover existing structure before proposing additions.</purpose>
    <best_practices>
      <practice>Use non-recursive first for large repos, then narrow.</practice>
      <practice>Only escalate to recursive if structure shallow or targeted path chosen.</practice>
    </best_practices>
    <example><![CDATA[
<list_files>
<path>.</path>
<recursive>false</recursive>
</list_files>
]]></example>
  </tool>

  <tool name="search_files">
    <purpose>Locate existing MCP-related modules, patterns, or conflicting names.</purpose>
    <when_to_use>Before creating new server if any 'mcp' or 'server' modules may already exist.</when_to_use>
    <regex_guidelines>
      <tip>Search for 'jsonrpc' or 'asyncio' to detect existing server skeletons.</tip>
      <tip>Use word boundaries: \bmcp\b to avoid partial matches.</tip>
    </regex_guidelines>
    <example><![CDATA[
<search_files>
<path>.</path>
<regex>\bmcp\b</regex>
</search_files>
]]></example>
  </tool>

  <tool name="read_file">
    <purpose>Obtain authoritative content before diff editing.</purpose>
    <rules>
      <rule>Always read file immediately before apply_diff to avoid stale context.</rule>
      <rule>Limit to necessary files (entrypoint, tools, safety modules).</rule>
    </rules>
    <example><![CDATA[
<read_file>
<args>
  <file>
    <path>mcp_server/main.py</path>
  </file>
</args>
</read_file>
]]></example>
  </tool>

  <tool name="ask_followup_question">
    <purpose>Clarify ambiguous requirements (tools, safety, streaming, background tasks).</purpose>
    <structure>
      <element>Direct question</element>
      <element>2-4 concrete suggestion options</element>
      <element>No placeholders</element>
    </structure>
    <example><![CDATA[
<ask_followup_question>
<question>Which advanced features should the server include?</question>
<follow_up>
  <suggest>Streaming directory listing tool</suggest>
  <suggest>Background cache refresh task</suggest>
  <suggest>Configuration reload tool only</suggest>
  <suggest>No advanced features; basic synchronous tools</suggest>
</follow_up>
</ask_followup_question>
]]></example>
  </tool>

  <tool name="write_to_file">
    <purpose>Create new files or complete rewrites (initial scaffold).</purpose>
    <best_practices>
      <practice>Include full file content; no ellipses.</practice>
      <practice>Keep scaffold minimal: entrypoint, registration, one sample tool, safety module.</practice>
      <practice>Document run command in comments.</practice>
    </best_practices>
    <scaffold_example><![CDATA[
<write_to_file>
<path>mcp_server/__main__.py</path>
<content>#!/usr/bin/env python
"""
Entry point for MCP server.
Run with:
  uvx python -m mcp_server
"""
import asyncio
from mcp_server.server import run

if __name__ == "__main__":
    asyncio.run(run())