[project]
name = "xlsx-reader"
version = "1.0.0"
description = "A comprehensive Model Context Protocol server for Excel (.xlsx) workbook reading and editing"
authors = [
    {name = "MCP Generator", email = "mcp@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13"
keywords = ["excel", "xlsx", "mcp", "model-context-protocol", "workbook", "spreadsheet", "openpyxl"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Spreadsheet",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # Core MCP server functionality
    "mcp>=1.0.0",
    # Excel processing libraries
    "openpyxl>=3.1.0",
    "xlsxwriter>=3.1.0",
    # Data manipulation and export
    "pandas>=2.0.0",
    # Date/time handling
    "python-dateutil>=2.8.0",
    # File locking for concurrent access
    "filelock>=3.12.0",
    # Enhanced type hints
    "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
]
advanced = [
    # Additional Excel features
    "xlwings>=0.30.0",  # Enhanced Excel integration (optional)
    "numpy>=1.24.0",    # Numerical computations for large datasets
]

[project.urls]
Homepage = "https://github.com/example/xlsx-reader-mcp"
Repository = "https://github.com/example/xlsx-reader-mcp"
Documentation = "https://github.com/example/xlsx-reader-mcp#readme"
Issues = "https://github.com/example/xlsx-reader-mcp/issues"

[project.scripts]
xlsx-reader = "xlsx_reader.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
# Use src/ layout explicit package path so hatchling includes code.
packages = ["src/xlsx_reader"]

[tool.black]
line-length = 100
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "openpyxl.*",
    "xlsxwriter.*",
    "pandas.*",
    "filelock.*",
    "mcp.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "large_file: marks tests that work with large Excel files",
]
asyncio_mode = "auto"